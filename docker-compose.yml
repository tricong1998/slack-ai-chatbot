version: "3.9"

services:
  postgres:
    container_name: postgres
    image: postgres:16-alpine
    ports:
      - ${DB_PORT}:${DOCKER_DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DATABASE={DB_NAME}
    networks:
      - hyper-automation-chatbot-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: >
        /bin/sh -c "
        pg_isready -d ${DB_NAME} -U ${DB_USER}
        "      
      interval: 5s
      timeout: 5s
      retries: 5

  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - "${AMQP_SERVER_PORT}:${AMQP_SERVER_PORT}" # for sender and consumer connections
      - "${AMQP_SERVER_GUI_PORT}:${AMQP_SERVER_GUI_PORT}" # for serve RabbitMQ GUI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - hyper-automation-chatbot-network  
    healthcheck:
      test: >
        /bin/sh -c "rabbitmqctl status"
      interval: 5s
      timeout: 5s
      retries: 5      

  chatbot-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      - message-broker
      - postgres
    networks:
      - hyper-automation-chatbot-network
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DOCKER_DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DOCKER_DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    command: ./hyper_automatation_chatbot
    restart: always

volumes:
  postgres-data:
  rabbitmq_data:

networks:
  hyper-automation-chatbot-network: